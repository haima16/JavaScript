!function(n,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t=e();for(var r in t)("object"==typeof exports?exports:n)[r]=t[r]}}(this,(function(){return function(n){var e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)t.d(r,o,function(e){return n[e]}.bind(null,o));return r},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=0)}([function(module,exports,__webpack_require__){"use strict";eval("\r\n// import MPlayer from '@hans000/media-player';\r\n// const canvas = document.querySelector('#canvas') as HTMLCanvasElement\r\n// const play = document.querySelector('#play') as HTMLButtonElement\r\n// const pause = document.querySelector('#pause') as HTMLButtonElement\r\n// const btnData = document.querySelector('#data') as HTMLButtonElement\r\n// const ctx = canvas.getContext('2d')\r\n// const player = new MPlayer(['./1.mp3'], {\r\n//     auto: true,\r\n//     fftSize: 512,\r\n// })\r\n// play.onclick = () => {\r\n//     player.play()\r\n// }\r\n// pause.onclick = () => {\r\n//     player.pause()\r\n// }\r\n// const COUNT = 120\r\n// const HEIGHT = 500, WIDTH = 500\r\n// const radio = window.devicePixelRatio\r\n// canvas.width = canvas.width * radio\r\n// canvas.height = canvas.height * radio\r\n// const tileHeight = 100\r\n// const perAngle = Math.PI * 2 / COUNT\r\n// const R = 100\r\n// const tileWidth = 4\r\n// const minHeight = 4\r\n// const dx = canvas.width / 2\r\n// const dy = canvas.height / 2\r\n// player.onload = () => {\r\n//     draw()\r\n// }\r\n// let flag = true\r\n// function draw() {\r\n//     ctx.clearRect(0, 0, WIDTH * radio, HEIGHT * radio)\r\n//     const data = player.getData()\r\n//     if (data) {\r\n//         data.forEach((e, i) => {\r\n//             if (i >= COUNT) {\r\n//                 return\r\n//             }\r\n//             ctx.save()\r\n//             const angle = perAngle * i\r\n//             ctx.fillStyle = '#f9f9b8'\r\n//             ctx.translate(dx, dy)\r\n//             ctx.rotate(angle)\r\n//             ctx.fillRect(R, 0 - tileWidth / 2, e + minHeight, tileWidth)\r\n//             ctx.restore()\r\n//         })\r\n//         flag = false\r\n//     }\r\n//     requestAnimationFrame(draw)\r\n// }\r\nfunction foo() {\r\n    if (false) {}\r\n    console.log(67890);\r\n}\r\n\n\n//# sourceURL=webpack:///./src/index.ts?")}]).default}));